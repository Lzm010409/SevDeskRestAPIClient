/*
 * This file is generated by jOOQ.
 */
package database.entities.tables;


import database.entities.Keys;
import database.entities.Public;
import database.entities.tables.records.RechtsanwälteRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rechtsanwälte extends TableImpl<RechtsanwälteRecord> {

    private static final long serialVersionUID = 919956457;

    /**
     * The reference instance of <code>public.rechtsanwälte</code>
     */
    public static final Rechtsanwälte RECHTSANWÄLTE = new Rechtsanwälte();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RechtsanwälteRecord> getRecordType() {
        return RechtsanwälteRecord.class;
    }

    /**
     * The column <code>public.rechtsanwälte.id</code>.
     */
    public final TableField<RechtsanwälteRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.rechtsanwälte.name</code>.
     */
    public final TableField<RechtsanwälteRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.rechtsanwälte.street</code>.
     */
    public final TableField<RechtsanwälteRecord, String> STREET = createField(DSL.name("street"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.rechtsanwälte.zip</code>.
     */
    public final TableField<RechtsanwälteRecord, String> ZIP = createField(DSL.name("zip"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.rechtsanwälte.city</code>.
     */
    public final TableField<RechtsanwälteRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.rechtsanwälte.tag</code>.
     */
    public final TableField<RechtsanwälteRecord, String> TAG = createField(DSL.name("tag"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.rechtsanwälte</code> table reference
     */
    public Rechtsanwälte() {
        this(DSL.name("rechtsanwälte"), null);
    }

    /**
     * Create an aliased <code>public.rechtsanwälte</code> table reference
     */
    public Rechtsanwälte(String alias) {
        this(DSL.name(alias), RECHTSANWÄLTE);
    }

    /**
     * Create an aliased <code>public.rechtsanwälte</code> table reference
     */
    public Rechtsanwälte(Name alias) {
        this(alias, RECHTSANWÄLTE);
    }

    private Rechtsanwälte(Name alias, Table<RechtsanwälteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rechtsanwälte(Name alias, Table<RechtsanwälteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Rechtsanwälte(Table<O> child, ForeignKey<O, RechtsanwälteRecord> key) {
        super(child, key, RECHTSANWÄLTE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<RechtsanwälteRecord, Long> getIdentity() {
        return Keys.IDENTITY_RECHTSANWÄLTE;
    }

    @Override
    public UniqueKey<RechtsanwälteRecord> getPrimaryKey() {
        return Keys.RECHTSANWÄLTE_PKEY;
    }

    @Override
    public List<UniqueKey<RechtsanwälteRecord>> getKeys() {
        return Arrays.<UniqueKey<RechtsanwälteRecord>>asList(Keys.RECHTSANWÄLTE_PKEY);
    }

    @Override
    public Rechtsanwälte as(String alias) {
        return new Rechtsanwälte(DSL.name(alias), this);
    }

    @Override
    public Rechtsanwälte as(Name alias) {
        return new Rechtsanwälte(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rechtsanwälte rename(String name) {
        return new Rechtsanwälte(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rechtsanwälte rename(Name name) {
        return new Rechtsanwälte(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
