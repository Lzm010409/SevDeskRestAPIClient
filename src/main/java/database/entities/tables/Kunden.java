/*
 * This file is generated by jOOQ.
 */
package database.entities.tables;


import database.entities.Keys;
import database.entities.Public;
import database.entities.tables.records.KundenRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kunden extends TableImpl<KundenRecord> {

    private static final long serialVersionUID = 662352440;

    /**
     * The reference instance of <code>public.kunden</code>
     */
    public static final Kunden KUNDEN = new Kunden();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KundenRecord> getRecordType() {
        return KundenRecord.class;
    }

    /**
     * The column <code>public.kunden.id</code>.
     */
    public final TableField<KundenRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.kunden.gender</code>.
     */
    public final TableField<KundenRecord, String> GENDER = createField(DSL.name("gender"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.kunden.firstname</code>.
     */
    public final TableField<KundenRecord, String> FIRSTNAME = createField(DSL.name("firstname"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.kunden.familyname</code>.
     */
    public final TableField<KundenRecord, String> FAMILYNAME = createField(DSL.name("familyname"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.kunden.street</code>.
     */
    public final TableField<KundenRecord, String> STREET = createField(DSL.name("street"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.kunden.zip</code>.
     */
    public final TableField<KundenRecord, String> ZIP = createField(DSL.name("zip"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.kunden.city</code>.
     */
    public final TableField<KundenRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.kunden.telnum</code>.
     */
    public final TableField<KundenRecord, String> TELNUM = createField(DSL.name("telnum"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.kunden.mail</code>.
     */
    public final TableField<KundenRecord, String> MAIL = createField(DSL.name("mail"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>public.kunden</code> table reference
     */
    public Kunden() {
        this(DSL.name("kunden"), null);
    }

    /**
     * Create an aliased <code>public.kunden</code> table reference
     */
    public Kunden(String alias) {
        this(DSL.name(alias), KUNDEN);
    }

    /**
     * Create an aliased <code>public.kunden</code> table reference
     */
    public Kunden(Name alias) {
        this(alias, KUNDEN);
    }

    private Kunden(Name alias, Table<KundenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kunden(Name alias, Table<KundenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Kunden(Table<O> child, ForeignKey<O, KundenRecord> key) {
        super(child, key, KUNDEN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<KundenRecord> getPrimaryKey() {
        return Keys.KUNDEN_PKEY;
    }

    @Override
    public List<UniqueKey<KundenRecord>> getKeys() {
        return Arrays.<UniqueKey<KundenRecord>>asList(Keys.KUNDEN_PKEY);
    }

    @Override
    public Kunden as(String alias) {
        return new Kunden(DSL.name(alias), this);
    }

    @Override
    public Kunden as(Name alias) {
        return new Kunden(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunden rename(String name) {
        return new Kunden(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kunden rename(Name name) {
        return new Kunden(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
